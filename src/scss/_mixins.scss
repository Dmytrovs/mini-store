

@use "sass:math";

//Percent
@function percent($px, $from: 100) {
	$result: math.div($px, $from) * 100%;
	@return $result;
}
//REM
@function toRem($px, $current: 16) {
	$result: math.div($px, $current) + rem;
	@return $result;
}
//EM
@function toEm($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

//Currency
@mixin currency($sym) {
	&::after {
		content: "#{$sym}";
	}
}



// Адаптивна властивість (clamp)
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $keepSize: 0,
  $widthFrom: null,
  $widthTo: null,
  $maxWidth: null,
  $maxWidthContainer: null,
  $containerWidth: null,
  $minWidth: null
) {
  // Подставляем значения, если не переданы
  @if $widthFrom == null {
    @if $containerWidth != null {
      $widthFrom: $containerWidth;
    } @else {
      $widthFrom: 1440; // fallback
    }
  }

  @if $widthTo == null {
    @if $minWidth != null {
      $widthTo: $minWidth;
    } @else {
      $widthTo: 320; // fallback
    }
  }

  @if $widthFrom == $containerWidth and $maxWidthContainer == 0 {
    @if $maxWidth != null {
      $widthFrom: $maxWidth;
    }
  }

  // Защита от нуля
  @if $startSize == 0 {
    $startSize: 0.000001;
  }
  @if $minSize == 0 {
    $minSize: 0.000001;
  }

  // Для calc()
  $addSize: math.div($startSize - $minSize, 16);

  // Брейкпоїнти в EM
  $widthFromMedia: toEm($widthFrom);
  $widthToMedia: toEm($widthTo);

  // Формула плаваючого значення
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if $yIntersection == 0 {
    $yIntersection: 0.000001;
  }

  $flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

  // Значення властивості
  $propertyValue: #{"clamp(" toRem($minSize) "," $flyValue "," toRem($startSize) ")"};
  @if $minSize > $startSize {
    $propertyValue: #{"clamp(" toRem($startSize) "," $flyValue "," toRem($minSize) ")"};
  }

  // Встановлюємо значення за замовчуванням
  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: toRem($startSize);
    }
  }

  // Адаптація у проміжку
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    #{$property}: $propertyValue;

    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }

    // Альтернатива без clamp()
    //@supports not (#{$property}: $propertyValue) {
    //  #{$property}: calc(#{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
    //}
  }

  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: toRem($minSize);
    }
  }
}
// 	grid-template-columns: toRem($paddingStart) 1fr minmax(auto, toRem($container)) 1fr toRem($paddingEnd);
// 	> * {
// 		min-width: 0;
// 		@if $type==1 {
// 			grid-column: 1 / 6;
// 		} @else if $type==2 {
// 			grid-column: 2 / 5;
// 		} @else if $type==3 {
// 			grid-column: 3 / 6;
// 		} @else if $type==4 {
// 			grid-column: 1 / 4;
// 		} @else if $type==5 {
// 			grid-column: 2 / 4;
// 		} @else if $type==6 {
// 			grid-column: 3 / 5;
// 		} @else {
// 			grid-column: 3 / 4;
// 		}
// 	}
// }

